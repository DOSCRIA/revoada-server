datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  engineType    = "library"
  binaryTargets = ["native"]
  output        = "./client"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "docs"
}

model Users {
  id           String    @id @default(uuid())
  name         String
  lastName     String    @map("last_name")
  email        String    @unique
  password     String    @unique
  phoneNumber  Int       @map("phone_number")
  country      String
  region       String
  city         String
  neighborhood String
  address      String
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  userToken    UsersTokens?
  usersTicket  UsersTickets[]
  usersCompany UsersCompanies[]
  userLogin    UsersLogins[]

  @@map("users")
}

model UsersTokens {
  id        String    @id @default(uuid())
  userId    String    @unique
  expiresAt Int       @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("users_tokens")
}

model UsersLogins {
  id        String    @id @default(uuid())
  userId    String
  ip        String?
  platform  String
  location  String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("users_logins")
}

model Companies {
  id          String    @id @default(uuid())
  name        String
  email       String
  phoneNumber String    @map("phone_number")
  address     String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  events      Events[]
  userCompany UsersCompanies[]

  @@map("companies")
}

model UsersCompanies {
  id        String    @id @default(uuid())
  userId    String
  companyId String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user    Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Companies @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("users_companies")
}

model Events {
  id          String    @id @default(uuid())
  name        String
  description String
  companyId   String
  eventDate   DateTime  @default(now()) @map("event_date")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  company     Companies       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  eventTicket EventsTickets[]

  @@map("events")
}

model Tickets {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Decimal
  deadline    DateTime  @default(now())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  userTicket  UsersTickets[]
  eventTicket EventsTickets[]

  @@map("tickets")
}

model EventsTickets {
  id        String    @id @default(uuid())
  eventId   String
  ticketId  String
  quantity  Int
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  event  Events  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticket Tickets @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("events_tickets")
}

model UsersTickets {
  id        String    @id @default(uuid())
  userId    String
  ticketId  String
  quantity  Int
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  ticket Tickets @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("users_tickets")
}
